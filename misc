spinnakar =======================================
Yes! Spinnaker and Jenkins often complement each other:
Jenkins can handle builds and testing phases.
Spinnaker can take over for deployment and post-deployment processes.



STORAGE (RAID) ==================================
https://youtu.be/U-OCdTeZLac?si=8AnZW88kMaOgJE8d

RAID : Redundant array of independent disks

Type of RAID :
--------------
RAID 0 (aka Striping).............. : Array of 2 disks. Data spread/strip accross 2 disks. no fault tolerence, any 1 disk become faulty, the whole data will be corrupt. read will be faster/speed
RAID 1 (aka mirroring/duplexing)... : Array of 2 or more disks. data duplicates on both/all disks. only 50% of storage will be used, provide fault tolerence and speed. 
RAID 5 (stripping with parity)..... : Most common - Array of min. 3 disks. data spread/stripped accross all disks (same like RAID 0), but with a PARITY bit. incase of any disk failure, the PARITY helps in rebuilding the data. 75% of capacity can be used. 
RAID 10 (RAID 0 + RAID 1) (aka ) .. : Array of min. 4 disks. combine stripping with mirriroing. 50% of capacity can be used.




SPLUNK =============================================
Forwarder
  - universal forwarder (lightweight 100+)
  - Heavy forwarder (ability to filter the raw data and then send to indexer)
Indexer 
  - Store and Index the raw data sent by forwarder
Searh-Head
  - ability to search the data with GUI



JENKINS ============================================
jenkins jobs
build jennkins job with parameter
schedule jenkins job (build trigger)
interact with GITHUB (github pluggin needs to install) 
/var/lib/jenkins <--- jenkins related files 
/var/lib/jenkins/workspace <--- all created jobs exists here
Jenkins notify --> email notification
run tasks/jobs on remote servers
jenkins + ansible
ENV variables in jenkins (Pre-defined --- example - BUILD_NUMBER, WORKSPACE etc.)
  Can  be created as well.
jenkins + MAVEN
Jenkins project type
  - free-style
  - pipeline




HARDWARE ============================================
Top Enterprise-grade hardware/server vendors
- Dell 
    Populer server line : PowerEdge
    management console (BMC) : iDRAC (Integrated Dell Remote Access Controller)
- HPE
    Populer server line : ProLiant
    management console (BMC) : iLO (Integrated Lights-Out)
- CISCO
    Populer server line : UCS
    management console (BMC) : CIMC (Cisco Integrated Management Controller)
- IBM
    Populer server line : Power-systems, zSystems
    management console (BMC) : HMC (Hardware Management Console)
- SUPERMICRO
    Populer server line : SuperServer
    management console (BMC) : IPMIview / IPMI (Intelligent Platform Management Interface)

Other --- Lenovo, oracle, fujitsu




/etc/nsswitch.conf =============
The /etc/nsswitch.conf file configures the Name Service Switch (NSS), which determines how different types of system databases (like user accounts, hostnames, and group information) are resolved on a Linux system. It specifies the sources for resolving various types of information such as users, groups, hosts, and services.


demsg =========== (Kernel Ring Buffer) 
 - It keeps all the logs which appear on the boot screen during server boot-up.
 - This buffer is like a ring, the messages keeps overiting in ring format, older messages will be overwritten by new logs.
 - Kernel ring buffer have a fixed size to keep the information safe.
 - to view, use "demsg" command or look for /var/log/demsg.log.




TCP Connection Lifecycle (Three-Way Handshake + Termination) =====================

Connection Establishment (Three-way handshake):
  Client → SYN → Server (SYN-SENT state)
  Server → SYN-ACK → Client (SYN-RECEIVED state)
  Client → ACK → Server (ESTABLISHED state)

Connection Termination (Four-way handshake):
  Client → FIN → Server (FIN-WAIT-1)
  Server → ACK → Client (FIN-WAIT-2)
  Server → FIN → Client (CLOSE-WAIT)
  Client → ACK → Server (TIME-WAIT)


KAFKA =============================================
SaaS based also exists (cloud). PUB-SUB
Components :
 - Producer (public data)
 - Brokers ( topic0,1,2....n)
 - Consumer (subscribe to one or more topic in kafa and get data)

 - Topic (stream of related events)
 - Partition (storage)

 - ZooKeeper - Seperate tool- manages brokers - Its obsolete and replaced by KAFKA KIP.


Producers: Send messages to Kafka topics.
Brokers: Handle message storage and distribution within a Kafka cluster.
Topics: Logical categories to which messages are published.
Partitions: Topics are split into partitions for scalability.
Consumers: Subscribe to topics and consume messages.
Zookeeper (optional in newer versions): Manages cluster metadata and broker coordination.



DNS ========================================
bind package -- chroot-bind more secure
service name -- named.service
global config file -- /etc/named.conf <---------- This contans the details of zone files
zone file/s -- /var/named/db.*  <-------- This file contains name to IP and IP to name mapping 

DNS hirarachy 
 - DNS root domain servers ( "." zone , example - www.google.com. (last ".")
 - DNS TLDs (top level domain servers)
 - authoritative domain servers

DNS records 
 - A record .......: Name to IP
 - AAAA record ....: Name to IPv6
 - PTR record .....: IP to name 
 - NS record ......: name server
 - MX record ......: mail exchange server record
 - CNAME ..........: domain alias record


nslookup (DNS resolver bundled in BIND) --> /etc/hosts --> /etc/resolve.conf ---> DNS server ---> Zone file ---> find record, returns the response




REDIS ========================================
Remote directory server - in-memory cache server (saves as combination of key and value)
Its fast because it cache data on memory (RAM) and not on disk.
